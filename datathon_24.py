# -*- coding: utf-8 -*-
"""Datathon_24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kv4UFN9EdhKM4kSN3Skt1t2AR9dUtbg_

### Please ensure the data file is properly loaded before running this file. Please upload the csv file of retail track
"""

# importing necessary files
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.neural_network import MLPRegressor

data=pd.read_csv("/content/UrbanEdgeApparel - UrbanEdgeApparel.csv")

data.info()

data.shape

data.isnull().sum()

#removing pending payment as they may affect the predicted values
df= data[~data['Payment Status'].isin(['Canceled'])]

# Assign integer values to each country
df['Shipping Country Code'] = pd.factorize(df['Shipping Country'])[0]

df.head()

df.iloc[991]

df['Payment Status']

#dropping unnecessary values
df=df.drop('Payment Status',axis=1)
df=df.drop('Order Status',axis=1)
df=df.drop('Order Date',axis=1)
df=df.drop('Order Day of Week',axis=1)
df=df.drop('Order Month',axis=1)
df=df.drop('Product Variant ID',axis=1)
df=df.drop('Shipping Address Type',axis=1)
df=df.drop('Shipping City',axis=1)
df=df.drop('Shipping State',axis=1)
df=df.drop('Shipping Postal Code',axis=1)
df=df.drop('Shipping Country',axis=1)

# Fill missing values with a default value 0
# Some customers don't have company Id they could just be individuals buying
df['Company ID'] = df['Company ID'].fillna('0')

#converting string to int
df['Company ID'] = df['Company ID'].str.extract('(\d+)').astype(int)
df['Customer ID'] = df['Customer ID'].str.extract('(\d+)').astype(int)
df['Product ID'] = df['Product ID'].str.extract('(\d+)').astype(int)

# Drop rows with null values across all columns
df = df.dropna()

df= df[~df['Total Selling Price'].isin(['0'])]

#For the company as a whole
y=df['Total Selling Price']

y.info()

x=df.drop('Total Selling Price',axis=1)

x.info()

x.head()

x.isnull().sum()

#spliting 80/20
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

y.isnull().sum()

y_train.head()

y_train.dtypes
y_train.unique()

# predicting the values
model = RandomForestRegressor(n_estimators=100)

model.fit(x_train,y_train)
y_pred= model.predict(x_test)
print(y_pred)

from sklearn.metrics import mean_absolute_error
mae=mean_absolute_error(y_test, y_pred)
print(f"Mean absolute error: {mae}")

from sklearn.metrics import mean_squared_error
mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
print(f"Root mean squared error: {rmse}")

#Margin of error
from scipy.stats import norm
n = len(y_pred)
std_dev = np.std(y_pred, ddof=1)
confidence_level = 0.95
z = norm.ppf((1 + confidence_level) / 2)
# Calculate the margin of error
margin_of_error = z * (std_dev / np.sqrt(n))
print(f"Margin of Error: {margin_of_error:.2f}")

#plotting
actual_sales = y_test
predicted_sales = y_pred

# Plot actual vs. predicted total sales
plt.figure(figsize=(10, 6))
plt.plot(actual_sales, label='Actual Sales', marker='o')  # Plot actual sales
plt.plot(predicted_sales, label='Predicted Sales', marker='x')  # Plot predicted sales
plt.xlabel('Years')  # Add x-axis label (e.g., time periods)
plt.ylabel('Total Sales')  # Add y-axis label
plt.title('Actual vs. Predicted Total Sales')  # Add plot title
plt.legend()  # Show legend
plt.grid(True)  # Add gridlines
plt.show()

#For each product ID
y=df['Product ID']

x=df.drop('Product ID',axis=1)

x.info()

#spliting 80/20
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

# predicting the values
model = RandomForestRegressor(n_estimators=100)

model.fit(x_train,y_train)
y_pred= model.predict(x_test)
print(y_pred)

from sklearn.metrics import mean_absolute_error
mae=mean_absolute_error(y_test, y_pred)
print(f"Mean absolute error: {mae}")

from sklearn.metrics import mean_squared_error
mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
print(f"Root mean squared error: {rmse}")

#Margin of error
from scipy.stats import norm
n = len(y_pred)
std_dev = np.std(y_pred, ddof=1)
confidence_level = 0.95
z = norm.ppf((1 + confidence_level) / 2)
# Calculate the margin of error
margin_of_error = z * (std_dev / np.sqrt(n))
print(f"Margin of Error: {margin_of_error:.2f}")

#For each company ID
y=df['Company ID']

x=df.drop('Company ID',axis=1)

#spliting 80/20
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

# predicting the values
model = RandomForestRegressor(n_estimators=100)

model.fit(x_train,y_train)
y_pred= model.predict(x_test)
print(y_pred)

from sklearn.metrics import mean_absolute_error
mae=mean_absolute_error(y_test, y_pred)
print(f"Mean absolute error: {mae}")

from sklearn.metrics import mean_squared_error
mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
print(f"Root mean squared error: {rmse}")

#Margin of error
from scipy.stats import norm
n = len(y_pred)
std_dev = np.std(y_pred, ddof=1)
confidence_level = 0.95
z = norm.ppf((1 + confidence_level) / 2)
# Calculate the margin of error
margin_of_error = z * (std_dev / np.sqrt(n))
print(f"Margin of Error: {margin_of_error:.2f}")

#For each country
y=df['Shipping Country Code']
x=df.drop('Shipping Country Code',axis=1)
#spliting 80/20
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
# predicting the values
model = RandomForestRegressor(n_estimators=100)

model.fit(x_train,y_train)
y_pred= model.predict(x_test)
print(y_pred)
#accuracy
from sklearn.metrics import mean_absolute_error
mae=mean_absolute_error(y_test, y_pred)
print(f"Mean absolute error: {mae}")
from sklearn.metrics import mean_squared_error
mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
print(f"Root mean squared error: {rmse}")
#Margin of error
from scipy.stats import norm
n = len(y_pred)
std_dev = np.std(y_pred, ddof=1)
confidence_level = 0.95
z = norm.ppf((1 + confidence_level) / 2)
# Calculate the margin of error
margin_of_error = z * (std_dev / np.sqrt(n))
print(f"Margin of Error: {margin_of_error:.2f}")